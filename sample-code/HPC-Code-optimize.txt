Original Code

#include <iostream>

int sumArray(const int* arr, int size) {
    int sum = 0;
    for (int i = 0; i < size; ++i) {
        sum += arr[i];
    }
    return sum;
}

int main() {
    const int SIZE = 1000;
    int arr[SIZE];
    for (int i = 0; i < SIZE; ++i) {
        arr[i] = i + 1;
    }
    
    std::cout << "Sum: " << sumArray(arr, SIZE) << std::endl;
    return 0;
}


improvement 1 - pointer arithmetic

#include <iostream>

int sumArray(const int* arr, int size) {
    int sum = 0;
    const int* end = arr + size;
    while (arr < end) {
        sum += *arr++;
    }
    return sum;
}

int main() {
    const int SIZE = 1000;
    int arr[SIZE];
    for (int i = 0; i < SIZE; ++i) {
        arr[i] = i + 1;
    }
    
    std::cout << "Sum: " << sumArray(arr, SIZE) << std::endl;
    return 0;
}

improvement 2 - Algorithm Library

#include <iostream>
#include <numeric>  // for std::accumulate

int main() {
    const int SIZE = 1000;
    int arr[SIZE];
    for (int i = 0; i < SIZE; ++i) {
        arr[i] = i + 1;
    }
    
    int sum = std::accumulate(arr, arr + SIZE, 0);
    std::cout << "Sum: " << sum << std::endl;
    return 0;
}

Improvement 3 - Parallel Processing

#include <iostream>
#include <numeric>  // for std::accumulate
#include <omp.h>    // for OpenMP

int main() {
    const int SIZE = 1000000;
    int* arr = new int[SIZE];
    for (int i = 0; i < SIZE; ++i) {
        arr[i] = i + 1;
    }
    
    long long sum = 0;
    #pragma omp parallel reduction(+:sum)
    {
        #pragma omp for
        for (int i = 0; i < SIZE; ++i) {
            sum += arr[i];
        }
    }
    
    std::cout << "Sum: " << sum << std::endl;
    delete[] arr;
    return 0;
}




